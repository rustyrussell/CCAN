#include <string.h>
#include "config.h"

/**
 * bottom_up_heapsort - bottom-up version of heapsort
 *
 * modified version of bottom up heapsort,
 * see details here: http://blog.dataparksearch.org/397
 * It is also unified with asort() to be typesafe and
 * takes a context pointer for comparison function.
 *
 * License: BSD (3 clause)
 * Author: Maxim Zakharov <dp.maxime@gmail.com>
 *
 * Example:
 *	#include <ccan/bottom_up_heapsort/bottom_up_heapsort.h>
 *	#include <stdio.h>
 *	#include <string.h>
 *	
 *	static int cmp(char *const *a, char *const *n, bool *casefold)
 *	{
 *		if (*casefold)
 *			return strcasecmp(*a, *n);
 *		else
 *			return strcmp(*a, *n);
 *	}
 *	
 *	int main(int argc, char *argv[])
 *	{
 *		bool casefold = false;
 *		unsigned int i;
 *	
 *		if (argc < 2) {
 *			fprintf(stderr, "Usage: %s [-i] <list>...\n"
 *				"Sort arguments (-i = ignore case)\n",
 *				argv[0]);
 *			exit(1);
 *		}
 *	
 *		if (strcmp(argv[1], "-i") == 0) {
 *			casefold = true;
 *			argc--;
 *			argv++;
 *		}
 *		bottom_up_heapsort(&argv[1], argc-1, cmp, &casefold);
 *		for (i = 1; i < argc; i++)
 *			printf("%s ", argv[i]);
 *		printf("\n");
 *		return 0;
 *	}
 */
int main(int argc, char *argv[])
{
	if (argc != 2)
		return 1;

	if (strcmp(argv[1], "depends") == 0) {
		printf("ccan/order\n");
		return 0;
	}
	if (strcmp(argv[1], "testdepends") == 0) {
		printf("ccan/array_size\n");
		return 0;
	}

	return 1;
}
